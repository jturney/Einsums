#
# ----------------------------------------------------------------------------------------------
#  Copyright (c) The Einsums Developers. All rights reserved.
#  Licensed under the MIT License. See LICENSE.txt in the project root for license information.
# ----------------------------------------------------------------------------------------------
#

set(EINSUMS_FIND_PACKAGE ON)
cmake_policy(VERSION 3.18)

# Forward EINSUMS_* cache variables
include("${CMAKE_CURRENT_LIST_DIR}/einsums_cache_variables.cmake")

# include einsums cmake utilities
include("${CMAKE_CURRENT_LIST_DIR}/einsums_macros.cmake")

# include exported targets
include("${CMAKE_CURRENT_LIST_DIR}/einsums_internal_targets.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/einsums_targets.cmake")

get_filename_component(
  _einsums_root_dir "${CMAKE_CURRENT_LIST_DIR}/../../.." ABSOLUTE
)

set(EINSUMS_VERSION_STRING "@EINSUMS_VERSION@")
set(EINSUMS_VERSION_MAJOR @EINSUMS_VERSION_MAJOR@)
set(EINSUMS_VERSION_MINOR @EINSUMS_VERSION_MINOR@)
set(EINSUMS_VERSION_PATCH @EINSUMS_VERSION_PATCH@)

set(EINSUMS_DEBUG_POSTFIX "@EINSUMS_DEBUG_POSTFIX@")
set(EINSUMS_BUILD_TYPE "@CMAKE_BUILD_TYPE@")
# We explicitly set the default to 98 to force CMake to emit a -std=c++XX flag.
# Some compilers (clang) have a different default standard for cpp and cu files,
# but CMake does not know about this difference. If the standard is set to the
# .cpp default in CMake, CMake will omit the flag, resulting in the wrong
# standard for .cu files.
set(CMAKE_CXX_STANDARD_DEFAULT 98)

set(EINSUMS_GIT_COMMIT
    "@EINSUMS_WITH_GIT_COMMIT@"
    CACHE STRING "Revision of einsums from Git" FORCE
)

set(EINSUMS_CXX_COMPILER
    "@CMAKE_CXX_COMPILER@"
    CACHE STRING "CXX compiler for einsums" FORCE
)
set(EINSUMS_CXX_COMPILER_ID
    "@CMAKE_CXX_COMPILER_ID@"
    CACHE STRING "CXX compiler id for einsums" FORCE
)
set(EINSUMS_CXX_COMPILER_VERSION
    "@CMAKE_CXX_COMPILER_VERSION@"
    CACHE STRING "CXX compiler version for einsums" FORCE
)

# ##############################################################################
# Setup the imported libraries (publicly linked) #

# Allocator
set(EINSUMS_JEMALLOC_ROOT "@JEMALLOC_ROOT@")
set(EINSUMS_TCMALLOC_ROOT "@TCMALLOC_ROOT@")
set(EINSUMS_TBBMALLOC_ROOT "@TBBMALLOC_ROOT@")
# Special handle for mimalloc cause we can't specify EINSUMS_MIMALLOC_ROOT as a HINT
# to find_package
set(EINSUMS_MIMALLOC_ROOT "@MIMALLOC_ROOT@")
if(NOT MIMALLOC_ROOT AND NOT "$ENV{MIMALLOC_ROOT}")
  set(MIMALLOC_ROOT ${EINSUMS_MIMALLOC_ROOT})
endif()
include(einsums_setup_allocator)

include(einsums_setup_threads)

# Boost Separate boost targets to be unarily linked to some modules
set(EINSUMS_BOOST_ROOT "@BOOST_ROOT@")
# By default BOOST_ROOT is set to EINSUMS_BOOST_ROOT (not necessary for PAPI or
# HWLOC cause we are specifying EINSUMS_<lib>_ROOT as an HINT to find_package)
if(NOT BOOST_ROOT AND NOT "$ENV{BOOST_ROOT}")
  set(BOOST_ROOT ${EINSUMS_BOOST_ROOT})
endif()
include(einsums_setup_boost)

include(einsums_setup_fmt)

# Hwloc
set(EINSUMS_HWLOC_ROOT "@HWLOC_ROOT@")
include(einsums_setup_hwloc)

# CUDA/HIP/whip
include(einsums_setup_hip)
include(einsums_setup_cuda)
include(einsums_setup_whip)

include(einsums_setup_mpi)

include(einsums_setup_stdexec)

# APEX
set(EINSUMS_APEX_ROOT "@APEX_ROOT@")
include(einsums_setup_apex)

# Tracy
if(EINSUMS_WITH_TRACY)
  find_dependency(Tracy REQUIRED)
endif()

set(EINSUMS_WITH_MALLOC_DEFAULT @EINSUMS_WITH_MALLOC@)

if(NOT EINSUMS_CMAKE_LOGLEVEL)
  set(EINSUMS_CMAKE_LOGLEVEL "WARN")
endif()

einsums_check_compiler_compatibility()
einsums_check_boost_compatibility()
einsums_check_allocator_compatibility()

if(NOT DEFINED ${CMAKE_FIND_PACKAGE_NAME}_FOUND)
  set(${CMAKE_FIND_PACKAGE_NAME}_FOUND true)
endif()
